plugins {
  alias(libs.plugins.architectury.plugin)
  alias(libs.plugins.architectury.loom).apply(false)
}

architectury {
  minecraft = libs.versions.minecraft.get()
}

subprojects {
  apply plugin: libs.plugins.architectury.loom.get().pluginId

  loom {
    silentMojangMappingsLicense()
  }

  dependencies {
    // Minecraft
    minecraft(libs.minecraft)
    // Mappings
    mappings(loom.officialMojangMappings())
  }

  processResources {
    project.properties.each {
      inputs.property "${it.key}", "${it.value}"
    }

    filesMatching(['*.mixins.json', 'pack.mcmeta', 'META-INF/mods.toml', 'fabric.mod.json', 'architectury.common.json']) {
      expand project.properties
    }
  }
  jar {
    manifest {
      attributes([
        'Specification-Title'     : "${MOD_ID}",
        'Specification-Vendor'    : "${MOD_AUTHOR}",
        'Specification-Version'   : "${MINECRAFT_VERSION}",
        'Implementation-Title'    : "${project.name}",
        'Implementation-Version'  : "${project.version}",
        'Implementation-Vendor'   : "${MOD_AUTHOR}",
        'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
      ])
    }
  }
}

allprojects {
  apply plugin: "java"
  apply plugin: "maven-publish"
  apply plugin: libs.plugins.architectury.plugin.get().pluginId

  archivesBaseName = MOD_ID + '-' + project.name
  version = MOD_VERSION + '+' + libs.versions.minecraft.get()
  group = MOD_GROUP + '.' + project.name

  repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
  }

  tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.release.set(17)
  }

  java {
    withSourcesJar()
  }
}
