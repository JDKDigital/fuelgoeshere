plugins {
  alias(libs.plugins.shadow)
}

architectury {
  platformSetupLoomIde()
  forge()
}

loom {
  accessWidenerPath = project(":common").loom.accessWidenerPath

  forge {
    mixinConfig "${MOD_ID}-common.mixins.json"
    convertAccessWideners = true
    extraAccessWideners.add(loom.accessWidenerPath.get().asFile.name)
  }
}

configurations {
  common
  shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
  compileClasspath.extendsFrom common
  runtimeClasspath.extendsFrom common
  developmentForge.extendsFrom common
}

dependencies {
  forge(libs.forge.loader)

  common(project(path: ":common", configuration: "namedElements")) { transitive false }
  shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

shadowJar {
  exclude "fabric.mod.json"
  exclude "architectury.common.json"

  configurations = [project.configurations.shadowCommon]
  classifier "dev-shadow"
}

remapJar {
  input.set shadowJar.archiveFile
  dependsOn shadowJar
  classifier null
}

jar {
  classifier "dev"
}

sourcesJar {
  def commonSources = project(":common").sourcesJar
  dependsOn commonSources
  from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
  withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
    skip()
  }
}

publishing {
  publications {
    mavenForge(MavenPublication) {
      artifactId = archivesBaseName
      from components.java
    }
  }

  // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
  repositories {
    // Add repositories to publish to here.
  }
}
